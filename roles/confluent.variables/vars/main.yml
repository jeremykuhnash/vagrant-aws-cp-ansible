---
#### Zookeeper Variables ####
zookeeper_service_name: confluent-zookeeper
zookeeper_main_package: "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka-2.12'}}"
zookeeper_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ zookeeper_main_package }}"
zookeeper_default_user: cp-kafka
zookeeper_default_group: confluent
zookeeper:
  config_file: /etc/kafka/zookeeper.properties
  systemd_file: /usr/lib/systemd/system/{{zookeeper_service_name}}.service
  systemd_override: /etc/systemd/system/{{zookeeper_service_name}}.service.d/override.conf

zookeeper_properties:
  defaults:
    enabled: true
    properties:
      clientPort: 2181
      maxClientCnxns: 0
      initLimit: 5
      syncLimit: 2
      autopurge.snapRetainCount: 10
      autopurge.purgeInterval: 1
      dataDir: /var/lib/zookeeper
      admin.enableServer: "false"
  ssl:
    enabled: "{{zookeeper_ssl_enabled}}"
    properties:
      secureClientPort: "{{zookeeper_client_port}}"
      serverCnxnFactory: org.apache.zookeeper.server.NettyServerCnxnFactory
      authProvider.x509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
      ssl.keyStore.location: "{{zookeeper_keystore_path}}"
      ssl.keyStore.password: "{{zookeeper_keystore_storepass}}"
      ssl.trustStore.location: "{{zookeeper_truststore_path}}"
      ssl.trustStore.password: "{{zookeeper_truststore_storepass}}"
      sslQuorum: "true"
      ssl.quorum.keyStore.location: "{{zookeeper_keystore_path}}"
      ssl.quorum.keyStore.password: "{{zookeeper_keystore_storepass}}"
      ssl.quorum.trustStore.location: "{{zookeeper_truststore_path}}"
      ssl.quorum.trustStore.password: "{{zookeeper_truststore_storepass}}"
      ssl.clientAuth: "{{ 'need' if zookeeper_ssl_mutual_auth_enabled|bool else 'none' }}"
  sasl:
    enabled: "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}"
    properties:
      authProvider.sasl: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
  sasl_kerberos:
    enabled: "{{ zookeeper_sasl_protocol == 'kerberos' }}"
    properties:
      kerberos.removeHostFromPrincipal: 'true'
      kerberos.removeRealmFromPrincipal: 'true'
  servers:
    enabled: true
    properties: "{{ zookeeper_servers | split_to_dict }}"

# Used only by zookeeper properties
zookeeper_servers: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}server.{{ hostvars[host]['zookeeper_id'] | default(groups.zookeeper.index(host) + 1)}}={{ zookeeper_current_node_hostname if host == inventory_hostname else host }}:{{zookeeper_peer_port}}:{{zookeeper_leader_port}}{% endfor %}"

zookeeper_combined_properties: "{{ zookeeper_properties | combine_properties }}"

zookeeper_final_properties: "{{ zookeeper_combined_properties | combine(zookeeper_custom_properties) }}"


#### Kafka Broker Variables ####
kafka_broker_service_name: "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka'}}"
kafka_broker_main_package: "{{ 'confluent-server' if confluent_server_enabled|bool else 'confluent-kafka-2.12'}}"
kafka_broker_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - confluent-rebalancer
  - confluent-security
kafka_broker_default_user: cp-kafka
kafka_broker_default_group: confluent
kafka_broker:
  config_file: /etc/kafka/server.properties
  systemd_file: /usr/lib/systemd/system/{{kafka_broker_service_name}}.service
  systemd_override: /etc/systemd/system/{{kafka_broker_service_name}}.service.d/override.conf

kafka_broker_properties:
  defaults:
    enabled: true
    properties:
      group.initial.rebalance.delay.ms: 3000
      log.retention.check.interval.ms: 300000
      log.retention.hours: 168
      log.segment.bytes: 1073741824
      num.io.threads: 16
      num.network.threads: 8
      num.partitions: 1
      num.recovery.threads.per.data.dir: 2
      offsets.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      socket.send.buffer.bytes: 102400
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      zookeeper.connection.timeout.ms: 18000
      confluent.license.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      confluent.metadata.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      confluent.security.event.logger.exporter.kafka.topic.replicas: "{{kafka_broker_default_interal_replication_factor}}"
      confluent.support.metrics.enable: "true"
      confluent.support.customer.id: anonymous
      zookeeper.connect: "{{ groups['zookeeper'] | default(['localhost']) | join(':' + zookeeper_client_port|string + ',') }}:{{zookeeper_client_port}}"
      log.dirs: /var/lib/kafka/data
      listener.security.protocol.map: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}:{{ listener['value'] | kafka_protocol_defaults(ssl_enabled, sasl_protocol)}}{% endfor %}"
      listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://:{{ listener['value']['port'] }}{% endfor %}"
      advertised.listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://{{ listener['value']['hostname'] | default(inventory_hostname) }}:{{ listener['value']['port'] }}{% endfor %}"
      inter.broker.listener.name: "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['name']}}"
  broker_id:
    enabled: "{{ inventory_hostname in groups.kafka_broker }}"
    properties:
      # broker.id logic depends on inventory hostname being in kafka_broker host list, defaulting to 0 if non kafka host
      broker.id: "{{ broker_id | default( groups.kafka_broker.index(inventory_hostname) + 1 ) if inventory_hostname in groups.kafka_broker else 0 }}"
  fips:
    enabled: "{{fips_enabled}}"
    properties:
      enable.fips: 'true'
      security.providers: io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator
  inter_broker_sasl:
    enabled: "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol != 'none' }}"
    properties:
      sasl.mechanism.inter.broker.protocol: "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol}}"
  sasl_enabled:
    enabled: "{{ kafka_broker_sasl_enabled_mechanisms|length > 0 }}"
    properties:
      sasl.enabled.mechanisms: "{% for mechanism in kafka_broker_sasl_enabled_mechanisms %}{% if loop.index > 1%},{% endif %}{{ mechanism|upper }}{% endfor %}"
  sasl_gssapi:
    enabled: "{{ 'GSSAPI' in kafka_broker_sasl_enabled_mechanisms }}"
    properties:
      sasl.kerberos.service.name: "{{kerberos_kafka_broker_primary | default('kafka')}}"
  zk_ssl:
    enabled: "{{ zookeeper_ssl_enabled }}"
    properties:
      zookeeper.ssl.client.enable: 'true'
      zookeeper.clientCnxnSocket: org.apache.zookeeper.ClientCnxnSocketNetty
      zookeeper.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      zookeeper.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
  zk_ssl_fips:
    enabled: "{{ zookeeper_ssl_enabled and fips_enabled }}"
    properties:
      zookeeper.ssl.trustmanager.algorithm: PKIX
      zookeeper.ssl.truststore.type: pkcs12
  zk_mtls:
    enabled: "{{ zookeeper_ssl_mutual_auth_enabled }}"
    properties:
      zookeeper.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      zookeeper.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
  zk_mtls_fips:
    enabled: "{{ zookeeper_ssl_mutual_auth_enabled and fips_enabled}}"
    properties:
      zookeeper.ssl.keymanager.algorithm: PKIX
      zookeeper.ssl.keystore.type: pkcs12
  zk_acls:
    enabled: "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}"
    properties:
      zookeeper.set.acl: 'true'
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      confluent.schema.registry.url: "{{schema_registry_url}}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      confluent.schema.registry.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      confluent.schema.registry.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
      confluent.schema.registry.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      confluent.schema.registry.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      confluent.schema.registry.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
  rbac:
    enabled: "{{ rbac_enabled }}"
    properties:
      authorizer.class.name: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      confluent.authorizer.access.rule.providers: CONFLUENT,ZK_ACL
      super.users: "User:{{ mds_super_user|default('mds') }}"
  rbac_external:
    enabled: "{{rbac_enabled and external_mds_enabled}}"
    properties:
      confluent.metadata.bootstrap.servers: "{{mds_broker_bootstrap_servers}}"
  rbac_external_client:
    enabled: "{{rbac_enabled and external_mds_enabled}}"
    properties: "{{ mds_broker_listener | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.metadata.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass,
                            false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'),
                            'user', 'pass', mds_bootstrap_server_urls) }}"
  rbac_internal:
    enabled: "{{rbac_enabled and not external_mds_enabled}}"
    properties:
      confluent.metadata.server.listeners: "{{mds_http_protocol}}://0.0.0.0:{{mds_port}}"
      confluent.metadata.server.advertised.listeners: "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(inventory_hostname) }}:{{mds_port}}"
      confluent.metadata.server.token.auth.enable: "true"
      confluent.metadata.server.token.max.lifetime.ms: 3600000
      confluent.metadata.server.token.key.path: "{{rbac_enabled_private_pem_path}}"
      confluent.metadata.server.public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.server.token.signature.algorithm: RS256
      confluent.metadata.server.authentication.method: BEARER
  rbac_internal_mds_ssl:
    enabled: "{{ mds_ssl_enabled and rbac_enabled and not external_mds_enabled}}"
    properties:
      confluent.metadata.server.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      confluent.metadata.server.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      confluent.metadata.server.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
      confluent.metadata.server.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      confluent.metadata.server.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
  listeners:
    enabled: true
    properties: "{{ kafka_broker_listeners | listener_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass,
                            plain_jaas_config, kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'),
                            sasl_scram_users.admin.principal, sasl_scram_users.admin.password, rbac_enabled_public_pem_path ) }}"
  metrics_reporter:
    enabled: "{{kafka_broker_metrics_reporter_enabled}}"
    properties:
      metric.reporters: io.confluent.metrics.reporter.ConfluentMetricsReporter
      confluent.metrics.reporter.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']}}"
      confluent.metrics.reporter.topic.replicas: "{{kafka_broker_default_interal_replication_factor}}"
  metrics_reporter_client:
    enabled: "{{kafka_broker_metrics_reporter_enabled}}"
    properties: "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.metrics.reporter.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass,
                            false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_broker_keytab_path, kafka_broker_kerberos_principal|default('kafka'),
                            'user', 'pass', mds_bootstrap_server_urls) }}"

kafka_broker_combined_properties: "{{kafka_broker_properties | combine_properties}}"

kafka_broker_final_properties: "{{ kafka_broker_combined_properties | combine(kafka_broker_custom_properties) }}"

# Need complex jinja templating here, to be used by kafka broker listeners
plain_jaas_config: |-
  org.apache.kafka.common.security.plain.PlainLoginModule required username="{{sasl_plain_users.admin.principal}}" password="{{sasl_plain_users.admin.password}}" {% for user in sasl_plain_users|dict2items %} user_{{ user['value']['principal'] }}="{{ user['value']['password'] }}"{% endfor %};


#### Schema Registry Variables ####
schema_registry_service_name: confluent-schema-registry
schema_registry_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - confluent-schema-registry
  - confluent-security
schema_registry_default_user: cp-schema-registry
schema_registry_default_group: confluent
schema_registry:
  config_file: /etc/schema-registry/schema-registry.properties
  systemd_file: /usr/lib/systemd/system/{{schema_registry_service_name}}.service
  systemd_override: /etc/systemd/system/{{schema_registry_service_name}}.service.d/override.conf

schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"

schema_registry_url: "{{schema_registry_http_protocol}}://{{ groups['schema_registry'] | default(['localhost']) | join(':' + schema_registry_listener_port|string + ',' + schema_registry_http_protocol + '://') }}:{{schema_registry_listener_port}}"

schema_registry_properties:
  defaults:
    enabled: true
    properties:
      debug: 'false'
      schema.registry.group.id: schema-registry
      kafkastore.topic: _schemas
      listeners: "{{schema_registry_http_protocol}}://0.0.0.0:{{schema_registry_listener_port}}"
      host.name: "{{inventory_hostname}}"
      inter.instance.protocol: "{{schema_registry_http_protocol}}"
      kafkastore.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[schema_registry_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[schema_registry_kafka_listener_name]['port']}}"
  ssl:
    enabled: "{{schema_registry_ssl_enabled}}"
    properties:
      security.protocol: SSL
      ssl.keystore.location: "{{schema_registry_keystore_path}}"
      ssl.keystore.password: "{{schema_registry_keystore_storepass}}"
      ssl.key.password: "{{schema_registry_keystore_keypass}}"
  truststore:
    enabled: "{{schema_registry_ssl_mutual_auth_enabled|bool or mds_ssl_enabled|bool}}"
    properties:
      ssl.truststore.location: "{{schema_registry_truststore_path}}"
      ssl.truststore.password: "{{schema_registry_truststore_storepass}}"
  mtls:
    enabled: "{{ schema_registry_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: true
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[schema_registry_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'kafkastore.', schema_registry_truststore_path, schema_registry_truststore_storepass, schema_registry_keystore_path, schema_registry_keystore_storepass, schema_registry_keystore_keypass,
                            false, sasl_plain_users.schema_registry.principal, sasl_plain_users.schema_registry.password, sasl_scram_users.schema_registry.principal, sasl_scram_users.schema_registry.password,
                            kerberos_kafka_broker_primary|default('kafka'), schema_registry_keytab_path, schema_registry_kerberos_principal|default('kafka'),
                            schema_registry_ldap_user, schema_registry_ldap_password, mds_bootstrap_server_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      kafkastore.connection.url: "{{ groups['zookeeper'] | default(['localhost']) | join(':' + zookeeper_final_properties.clientPort|string + ',') }}:{{zookeeper_final_properties.clientPort}}"
      schema.registry.resource.extension.class: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
      confluent.schema.registry.authorizer.class: io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      confluent.schema.registry.auth.mechanism: JETTY_AUTH
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      authentication.roles: "**"
      confluent.metadata.bootstrap.server.urls: "{{mds_bootstrap_server_urls}}"
      confluent.metadata.http.auth.credentials.provider: BASIC
      confluent.metadata.basic.auth.user.info: "{{ schema_registry_ldap_user | default('MISSING') }}:{{ schema_registry_ldap_password | default('MISSING')}}"
  rbac_external_client:
    enabled: "{{ rbac_enabled and external_mds_enabled and mds_ssl_enabled }}"
    properties:
      kafkastore.ssl.truststore.location: "{{schema_registry_truststore_path}}"
      kafkastore.ssl.truststore.password: "{{schema_registry_truststore_storepass}}"

schema_registry_combined_properties: "{{schema_registry_properties | combine_properties}}"

schema_registry_final_properties: "{{ schema_registry_combined_properties | combine(schema_registry_custom_properties) }}"


#### Kafka Connect Variables ####
kafka_connect_service_name: confluent-kafka-connect
kafka_connect_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - confluent-kafka-connect-replicator
  - confluent-security
  - confluent-rebalancer
  - confluent-control-center-fe
  - confluent-control-center
  - confluent-schema-registry
kafka_connect_default_user: cp-kafka-connect
kafka_connect_default_group: confluent
kafka_connect:
  config_file: /etc/kafka/connect-distributed.properties
  systemd_file: /usr/lib/systemd/system/{{kafka_connect_service_name}}.service
  systemd_override: /etc/systemd/system/{{kafka_connect_service_name}}.service.d/override.conf

kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"

kafka_connect_properties:
  defaults:
    enabled: true
    properties:
      rest.port: "{{kafka_connect_rest_port}}"
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      config.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      config.storage.topic: "{{kafka_connect_group_id}}-configs"
      group.id: "{{kafka_connect_group_id}}"
      internal.key.converter: org.apache.kafka.connect.json.JsonConverter
      internal.key.converter.schemas.enable: "false"
      internal.value.converter: org.apache.kafka.connect.json.JsonConverter
      internal.value.converter.schemas.enable: "false"
      offset.flush.interval.ms: 10000
      offset.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      offset.storage.topic: "{{kafka_connect_group_id}}-offsets"
      status.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      status.storage.topic: "{{kafka_connect_group_id}}-status"
      key.converter: io.confluent.connect.avro.AvroConverter
      value.converter: io.confluent.connect.avro.AvroConverter
      plugin.path: "{{(kafka_connect_plugins_path + [kafka_connect_confluent_hub_plugins_dest, kafka_connect_plugins_dest]) | unique | join(',')}}"
      connector.client.config.override.policy: All
      listeners: "{{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}"
      rest.advertised.listener: "{{kafka_connect_http_protocol}}"
      rest.advertised.host.name: "{{inventory_hostname}}"
      rest.advertised.port: "{{kafka_connect_rest_port}}"
      bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
      producer.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
      consumer.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
      producer.confluent.monitoring.interceptor.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
      consumer.confluent.monitoring.interceptor.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
  ssl:
    enabled: "{{kafka_connect_ssl_enabled}}"
    properties:
      listeners.https.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      listeners.https.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      listeners.https.ssl.key.password: "{{kafka_connect_keystore_keypass}}"
  mtls:
    enabled: "{{ kafka_connect_ssl_mutual_auth_enabled }}"
    properties:
      listeners.https.ssl.client.auth: "true"
      listeners.https.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      listeners.https.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      value.converter.schema.registry.url: "{{schema_registry_url}}"
      key.converter.schema.registry.url: "{{schema_registry_url}}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      value.converter.schema.registry.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      value.converter.schema.registry.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      value.converter.schema.registry.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      value.converter.schema.registry.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      value.converter.schema.registry.ssl.key.password: "{{kafka_connect_keystore_keypass}}"
      key.converter.schema.registry.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      key.converter.schema.registry.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      key.converter.schema.registry.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      key.converter.schema.registry.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      key.converter.schema.registry.ssl.key.password: "{{kafka_connect_keystore_keypass}}"
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            '', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  producer:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'producer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            true, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  consumer:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'consumer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            true, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  producer_monitoring_interceptor:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'producer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  consumer_monitoring_interceptor:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'consumer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      rest.extension.classes: "io.confluent.connect.security.ConnectSecurityExtension{% if kafka_connect_secret_registry_enabled|bool %},io.confluent.connect.secretregistry.ConnectSecretRegistryExtension{% endif %}"
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.bootstrap.server.urls: "{{mds_bootstrap_server_urls}}"
      confluent.metadata.basic.auth.user.info: "{{kafka_connect_ldap_user| default('MISSING')}}:{{kafka_connect_ldap_password| default('MISSING')}}"
      confluent.metadata.http.auth.credentials.provider: BASIC
  rbac_external_client:
    enabled: "{{rbac_enabled and external_mds_enabled and mds_ssl_enabled  }}"
    properties:
      consumer.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      consumer.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      producer.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      producer.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
      config.providers.secret.param.kafkastore.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      config.providers.secret.param.kafkastore.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
  secret_registry:
    enabled: "{{kafka_connect_secret_registry_enabled}}"
    properties:
      config.providers: secret
      config.providers.secret.class: io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider
      config.providers.secret.param.master.encryption.key: "{{kafka_connect_secret_registry_key}}"
      config.providers.secret.param.kafkastore.topic: _confluent-secrets
      config.providers.secret.param.secret.registry.group.id: secret-registry
      config.providers.secret.param.kafkastore.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}"
  secret_registry_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'config.providers.secret.param.kafkastore.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_connect_keytab_path, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"

kafka_connect_combined_properties: "{{kafka_connect_properties | combine_properties}}"

kafka_connect_final_properties: "{{ kafka_connect_combined_properties | combine(kafka_connect_custom_properties) }}"


#### KSQLDB Variables ####
ksql_service_name: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('confluent-ksqldb' , 'confluent-ksql')}}"
ksql_main_package: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('confluent-ksqldb' , 'confluent-ksql')}}"
ksql_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - "{{ ksql_main_package }}"
  - confluent-security
  - confluent-rebalancer
  - confluent-control-center-fe
  - confluent-control-center
ksql_default_user: cp-ksql
ksql_default_group: confluent
ksql:
  config_file: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server.properties' , '/etc/ksql/ksql-server.properties')}}"
  systemd_file: /usr/lib/systemd/system/{{ksql_service_name}}.service
  systemd_override: /etc/systemd/system/{{ksql_service_name}}.service.d/override.conf

ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"

ksql_properties:
  defaults:
    enabled: true
    properties:
      application.id: ksql-server
      ksql.service.id: "{{ ksql_service_id }}"
      ksql.internal.topic.replicas: "{{ ksql_default_internal_replication_factor }}"
      ksql.streams.replication.factor: "{{ ksql_default_internal_replication_factor }}"
      ksql.streams.state.dir: /var/lib/kafka-streams
      ksql.streams.num.standby.replicas: 1
      ksql.streams.producer.delivery.timeout.ms: 2147483647
      ksql.streams.producer.max.block.ms: 9223372036854775807
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      listeners: "{{ksql_http_protocol}}://0.0.0.0:{{ksql_listener_port}}"
      bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[ksql_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}"
      security.protocol: "{{kafka_broker_listeners[ksql_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}"
      confluent.monitoring.interceptor.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[ksql_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}"
  ssl:
    # KSQL SSL properties shared with Kafka Broker
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled']|default(ssl_enabled)|bool or ksql_ssl_enabled|bool }}"
    properties:
      ssl.truststore.location: "{{ksql_truststore_path}}"
      ssl.truststore.password: "{{ksql_truststore_storepass}}"
      ssl.keystore.location: "{{ksql_keystore_path}}"
      ssl.keystore.password: "{{ksql_keystore_storepass}}"
      ssl.key.password: "{{ksql_keystore_keypass}}"
  mtls:
    enabled: "{{ ksql_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: 'true'
  kafka_sasl_plain:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' }}"
    properties:
      sasl.mechanism: PLAIN
      sasl.jaas.config: |-
        org.apache.kafka.common.security.plain.PlainLoginModule required username="{{sasl_plain_users.ksql.principal}}" password="{{sasl_plain_users.ksql.password}}";
  kafka_sasl_scram:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-512' }}"
    properties:
      sasl.mechanism: SCRAM-SHA-512
      sasl.jaas.config: |-
        org.apache.kafka.common.security.scram.ScramLoginModule required username="{{sasl_scram_users.ksql.principal}}" password="{{sasl_scram_users.ksql.password}}";
  kafka_sasl_gssapi:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' }}"
    properties:
      sasl.mechanism: GSSAPI
      sasl.kerberos.service.name: "{{kerberos_kafka_broker_primary | default('kafka')}}"
      sasl.jaas.config: |-
        com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab="{{ksql_keytab_path}}" principal="{{ksql_kerberos_principal | default('ksql')}}";
  kafka_sasl_oauth:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' }}"
    properties:
      sasl.mechanism: OAUTHBEARER
      sasl.login.callback.handler.class: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
      sasl.jaas.config: |-
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username="{{ksql_ldap_user | default('ksql')}}" password="{{ksql_ldap_password | default('pass')}}" metadataServerUrls="{{mds_bootstrap_server_urls}}";
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      ksql.schema.registry.url: "{{schema_registry_url}}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      ksql.schema.registry.ssl.truststore.location: "{{ksql_truststore_path}}"
      ksql.schema.registry.ssl.truststore.password: "{{ksql_truststore_storepass}}"
      ksql.schema.registry.ssl.keystore.location: "{{ksql_keystore_path}}"
      ksql.schema.registry.ssl.keystore.password: "{{ksql_keystore_storepass}}"
      ksql.schema.registry.ssl.key.password: "{{ksql_keystore_keypass}}"
  sr_rbac:
    enabled: "{{ 'schema_registry' in groups and rbac_enabled|bool }}"
    properties:
      ksql.schema.registry.basic.auth.credentials.source: USER_INFO
      ksql.schema.registry.basic.auth.user.info: "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}"
  monitoring_interceptor:
    # TODO only want this if c3 installed i think
    enabled: true
    properties: "{{ kafka_broker_listeners[ksql_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.monitoring.interceptor.', ksql_truststore_path, ksql_truststore_storepass, ksql_keystore_path, ksql_keystore_storepass, ksql_keystore_keypass,
                            false, sasl_plain_users.ksql.principal, sasl_plain_users.ksql.password, sasl_scram_users.ksql.principal, sasl_scram_users.ksql.password,
                            kerberos_kafka_broker_primary|default('kafka'), ksql_keytab_path, ksql_kerberos_principal|default('ksql'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_bootstrap_server_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      ksql.security.extension.class: io.confluent.ksql.security.KsqlConfluentSecurityExtension
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      websocket.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      oauth.jwt.public.key.path: "{{rbac_enabled_public_pem_path}}"
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.bootstrap.server.urls: "{{mds_bootstrap_server_urls}}"
      confluent.metadata.public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.basic.auth.user.info: "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}"
      confluent.metadata.http.auth.credentials.provider: BASIC
  rbac_external_client:
    enabled: "{{rbac_enabled and external_mds_enabled and mds_ssl_enabled }}"
    properties:
      ssl.truststore.location: "{{ksql_truststore_path}}"
      ssl.truststore.password: "{{ksql_truststore_storepass}}"

ksql_combined_properties: "{{ksql_properties | combine_properties}}"

ksql_final_properties: "{{ ksql_combined_properties | combine(ksql_custom_properties) }}"


#### Kafka Rest Variables ####
kafka_rest_service_name: confluent-kafka-rest
kafka_rest_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - confluent-kafka-rest
  - confluent-security
  - confluent-rebalancer
  - confluent-control-center-fe
  - confluent-control-center
kafka_rest_default_user: cp-kafka-rest
kafka_rest_default_group: confluent
kafka_rest:
  config_file: /etc/kafka-rest/kafka-rest.properties
  systemd_file: /usr/lib/systemd/system/{{kafka_rest_service_name}}.service
  systemd_override: /etc/systemd/system/{{kafka_rest_service_name}}.service.d/override.conf

kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"

kafka_rest_properties:
  defaults:
    enabled: true
    properties:
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      listeners: "{{kafka_rest_http_protocol}}://0.0.0.0:{{kafka_rest_port}}"
      host.name: "{{inventory_hostname}}"
      zookeeper.connect: "{{ groups['zookeeper'] | default(['localhost']) | join(':' + zookeeper_final_properties.clientPort|string + ',') }}:{{zookeeper_final_properties.clientPort}}"
      bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}"
      confluent.monitoring.interceptor.bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}"
  id:
    enabled: "{{ inventory_hostname in groups.kafka_rest }}"
    properties:
      # id logic depends on inventory hostname being in kafka_broker host list, defaulting to 0 if non rest proxy host
      id: "{{ groups.kafka_rest.index(inventory_hostname) + 1 if inventory_hostname in groups.kafka_rest else 0 }}"
  ssl:
    enabled: "{{kafka_rest_ssl_enabled}}"
    properties:
      ssl.keystore.location: "{{kafka_rest_keystore_path}}"
      ssl.keystore.password: "{{kafka_rest_keystore_storepass}}"
      ssl.key.password: "{{kafka_rest_keystore_keypass}}"
  truststore:
    enabled: "{{kafka_rest_ssl_mutual_auth_enabled|bool or mds_ssl_enabled|bool}}"
    properties:
      ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"
  mtls:
    enabled: "{{ kafka_rest_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: 'true'
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'client.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass,
                            false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_rest_keytab_path, kafka_rest_kerberos_principal|default('rp'),
                            kafka_rest_ldap_user, kafka_rest_ldap_password, mds_bootstrap_server_urls) }}"
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      schema.registry.url: "{{schema_registry_url}}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      schema.registry.ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      schema.registry.ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"
      schema.registry.ssl.keystore.location: "{{kafka_rest_keystore_path}}"
      schema.registry.ssl.keystore.password: "{{kafka_rest_keystore_storepass}}"
      schema.registry.ssl.key.password: "{{kafka_rest_keystore_keypass}}"
  monitoring_interceptor:
    # TODO interceptors only if c3 on right?
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.monitoring.interceptor.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass,
                            false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password,
                            kerberos_kafka_broker_primary|default('kafka'), kafka_rest_keytab_path, kafka_rest_kerberos_principal|default('rp'),
                            kafka_rest_ldap_user, kafka_rest_ldap_password, mds_bootstrap_server_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      kafka.rest.resource.extension.class: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      client.confluent.metadata.server.urls.max.age.ms: 60000
      confluent.metadata.bootstrap.server.urls: "{{mds_bootstrap_server_urls}}"
      confluent.metadata.server.urls.max.age.ms: 60000
      confluent.metadata.basic.auth.user.info: "{{kafka_rest_ldap_user | default('rest') }}:{{kafka_rest_ldap_password | default('pass')}}"
      confluent.metadata.http.auth.credentials.provider: BASIC

  rbac_external_client:
    enabled: "{{rbac_enabled and external_mds_enabled and mds_ssl_enabled }}"
    properties:
      ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"
      client.ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      client.ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"

kafka_rest_combined_properties: "{{kafka_rest_properties | combine_properties}}"

kafka_rest_final_properties: "{{ kafka_rest_combined_properties | combine(kafka_rest_custom_properties) }}"


#### Control Center Variables ####
control_center_service_name: confluent-control-center
control_center_packages:
  - confluent-common
  - confluent-rest-utils
  - confluent-metadata-service
  - "{{ kafka_broker_main_package }}"
  - confluent-security
  - confluent-rebalancer
  - confluent-control-center-fe
  - confluent-control-center
control_center_default_user: cp-control-center
control_center_default_group: confluent
control_center:
  config_file: /etc/confluent-control-center/control-center-production.properties
  systemd_file: /usr/lib/systemd/system/{{control_center_service_name}}.service
  systemd_override: /etc/systemd/system/{{control_center_service_name}}.service.d/override.conf

control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"

control_center_properties:
  defaults:
    enabled: true
    properties:
      confluent.controlcenter.streams.num.stream.threads: 8
      confluent.controlcenter.data.dir: /var/lib/confluent/control-center
      confluent.controlcenter.internal.topics.replication: "{{control_center_default_internal_replication_factor}}"
      confluent.metrics.topic.replication: "{{control_center_default_internal_replication_factor}}"
      confluent.monitoring.interceptor.topic.replication: "{{control_center_default_internal_replication_factor}}"
      confluent.controlcenter.command.topic.replication: "{{control_center_default_internal_replication_factor}}"
      confluent.controlcenter.rest.listeners: "{{control_center_http_protocol}}://{{control_center_listener_hostname}}:{{control_center_port}}"
      bootstrap.servers: "{{ groups['kafka_broker'] | default(['localhost']) | join(':' + kafka_broker_listeners[control_center_kafka_listener_name]['port']|string + ',') }}:{{kafka_broker_listeners[control_center_kafka_listener_name]['port']}}"
  ssl:
    enabled: "{{control_center_ssl_enabled}}"
    properties:
      confluent.controlcenter.rest.ssl.keystore.location: "{{control_center_keystore_path}}"
      confluent.controlcenter.rest.ssl.keystore.password: "{{control_center_keystore_storepass}}"
      confluent.controlcenter.rest.ssl.key.password: "{{control_center_keystore_keypass}}"
  mtls:
    enabled: "{{ control_center_ssl_mutual_auth_enabled }}"
    properties:
      confluent.controlcenter.rest.ssl.truststore.location: "{{control_center_truststore_path}}"
      confluent.controlcenter.rest.ssl.truststore.password: "{{control_center_truststore_storepass}}"
      confluent.controlcenter.rest.ssl.client.auth: 'true'
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[control_center_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.controlcenter.streams.', control_center_truststore_path, control_center_truststore_storepass, control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass,
                            false, sasl_plain_users.control_center.principal, sasl_plain_users.control_center.password, sasl_scram_users.control_center.principal, sasl_scram_users.control_center.password,
                            kerberos_kafka_broker_primary|default('kafka'), control_center_keytab_path, control_center_kerberos_principal|default('c3'),
                            control_center_ldap_user, control_center_ldap_password, mds_bootstrap_server_urls) }}"
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      confluent.controlcenter.schema.registry.url: "{{schema_registry_url}}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      confluent.controlcenter.schema.registry.ssl.truststore.location: "{{control_center_truststore_path}}"
      confluent.controlcenter.schema.registry.ssl.truststore.password: "{{control_center_truststore_storepass}}"
      confluent.controlcenter.schema.registry.ssl.keystore.location: "{{control_center_keystore_path}}"
      confluent.controlcenter.schema.registry.ssl.keystore.password: "{{control_center_keystore_storepass}}"
      confluent.controlcenter.schema.registry.ssl.key.password: "{{control_center_keystore_keypass}}"
  sr_rbac:
    enabled: "{{ 'schema_registry' in groups and rbac_enabled|bool }}"
    properties:
      confluent.controlcenter.schema.registry.basic.auth.credentials.source: USER_INFO
      confluent.controlcenter.schema.registry.basic.auth.user.info: "{{ control_center_ldap_user | default('c3') }}:{{ control_center_ldap_password | default('pass') }}"
  connect:
    enabled: "{{ 'kafka_connect' in groups }}"
    properties: "{{ kafka_connect_cluster_ansible_group_names | default(['kafka_connect']) | c3_connect_properties(groups, hostvars, kafka_connect_ssl_enabled,
        kafka_connect_http_protocol, kafka_connect_rest_port, kafka_connect_group_id, control_center_truststore_path, control_center_truststore_storepass,
        control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass) }}"
  ksql:
    enabled: "{{ 'ksql' in groups }}"
    properties: "{{ ksql_cluster_ansible_group_names | default(['ksql']) | c3_ksql_properties(groups, hostvars, ksql_ssl_enabled,
        ksql_http_protocol, ksql_listener_port, control_center_truststore_path, control_center_truststore_storepass,
        control_center_keystore_path, control_center_keystore_storepass, control_center_keystore_keypass) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      confluent.controlcenter.rest.authentication.method: BEARER
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.bootstrap.server.urls: "{{mds_bootstrap_server_urls}}"
      confluent.metadata.basic.auth.user.info: "{{ control_center_ldap_user | default('c3') }}:{{ control_center_ldap_password | default('pass') }}"
  rbac_external_client:
    enabled: "{{rbac_enabled and external_mds_enabled and mds_ssl_enabled }}"
    properties:
      confluent.controlcenter.streams.ssl.truststore.location: "{{control_center_truststore_path}}"
      confluent.controlcenter.streams.ssl.truststore.password: "{{control_center_truststore_storepass}}"

control_center_combined_properties: "{{control_center_properties | combine_properties}}"

control_center_final_properties: "{{ control_center_combined_properties | combine(control_center_custom_properties) }}"

#### RBAC Variables ####
mds_http_protocol: "{{ 'https' if mds_ssl_enabled|bool else 'http' }}"
