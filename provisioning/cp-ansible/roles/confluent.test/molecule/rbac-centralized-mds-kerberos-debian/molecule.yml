### rbac-centralized-mds-kerberos-debian
##
##  This Scenario requires that rbac-mds-kerberos-debian scenario has been converged successfully prior to running it.
##
---
driver:
  name: docker
platforms:
  - name: zookeeper1
    hostname: zookeeper1.confluent
    groups:
      - zookeeper
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: control-center1
    hostname: control-center1.confluent
    groups:
      - control_center
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    published_ports:
      - "9021:9021"
    networks:
      - name: confluent
provisioner:
  name: ansible
  config_options:
    defaults:
      hash_behaviour: merge
  playbooks:
    converge: ../../../../all.yml
  inventory:
    group_vars:
      all:
        scenario_name: rbac-centralized-mds-kerberos-debian

        ssl_enabled: false
        sasl_protocol: kerberos
        create_mds_certs: false
        token_services_public_pem_file: "roles/confluent.test/molecule/rbac-mds-kerberos-debian/generated_ssl_files/public.pem"
        token_services_private_pem_file: "roles/confluent.test/molecule/rbac-mds-kerberos-debian/generated_ssl_files/tokenKeypair.pem"
        rbac_enabled: true
        external_mds_enabled: true
        mds_broker_bootstrap_servers: mds-kafka-broker1:9093,mds-kafka-broker2:9093
        mds_bootstrap_server_urls: http://mds-kafka-broker1:8090,http://mds-kafka-broker2:8090
        mds_broker_listener:
          ssl_enabled: false
          ssl_mutual_auth_enabled: false
          sasl_protocol: kerberos


        kafka_broker_custom_listeners:
          client_listener:
            name: CLIENT
            port: 9093

        mds_super_user: mds
        mds_super_user_password: password

        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password

        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password

        ksql_ldap_user: ksql
        ksql_ldap_password: password

        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password

        control_center_ldap_user: control_center
        control_center_ldap_password: password

        kerberos_kafka_broker_primary: kafka
        kerberos:
          realm: realm.example.com
          kdc_hostname: mds-kerberos1
          admin_hostname: mds-kerberos1

      zookeeper:
        zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        zookeeper_kerberos_keytab_path: "roles/confluent.test/molecule/rbac-mds-kerberos-debian/keytabs/zookeeper-{{inventory_hostname}}.keytab"

      kafka_broker:
        kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        kafka_broker_kerberos_keytab_path: "roles/confluent.test/molecule/rbac-mds-kerberos-debian/keytabs/kafka_broker-{{inventory_hostname}}.keytab"
verifier:
  name: ansible
lint: |
  set -e
  yamllint -c ../../.yamllint ../..
scenario:
  test_sequence:
    - lint
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    # - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy
